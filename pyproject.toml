[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools >=64",
    "setuptools-git-versioning",
]

[project]
name = "innerscope"
dynamic = ["version"]
description = "Expose the inner scope of functions"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Erik Welch", email = "erik.n.welch@gmail.com"},
    {name = "Innerscope contributors"},
]
maintainers = [
    {name = "Erik Welch", email = "erik.n.welch@gmail.com"},
]
keywords = [
    "introspection",
    "dict",
    "utility",
    "bytecode",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "toolz",
]

[project.urls]
homepage = "https://github.com/eriknw/innerscope"
repository = "https://github.com/eriknw/innerscope"
changelog = "https://github.com/eriknw/innerscope/releases"

[project.optional-dependencies]
test = [
    "pytest >=6",
]

[tool.setuptools.packages.find]
include = [
    "innerscope*",
    "innerscope.*",
]
namespaces = false

[tool.setuptools-git-versioning]
enabled = true
dev_template = "{tag}+{ccount}.g{sha}"
dirty_template = "{tag}+{ccount}.g{sha}.dirty"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
profile = "black"
skip_gitignore = true
float_to_top = true
default_section = "THIRDPARTY"
known_first_party = "innerscope"
line_length = 100

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = "innerscope/tests"
xfail_strict = true
addopts = [
    "--strict-config",  # Force error if config is mispelled
    "--strict-markers",  # Force error if marker is mispelled (must be defined in config)
    "-ra",  # Print summary of all fails/errors
]
log_cli_level = "info"
filterwarnings = [
    "error",
]

[tool.coverage.run]
branch = true
source = ["innerscope"]

[tool.coverage.report]
ignore_errors = false
precision = 1
fail_under = 0
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
# https://github.com/charliermarsh/ruff/
line-length = 100
target-version = "py38"
select = [
    "ALL",
]
external = [
    # noqa codes that ruff doesn't know about: https://github.com/charliermarsh/ruff#external
]
ignore = [
    # Would be nice to fix these
    "D",

    # Intentionally ignored
    "COM812",  # Trailing comma missing
    "D203",  # 1 blank line required before class docstring (Note: conflicts with D211, which is preferred)
    "D400",  # First line should end with a period (Note: prefer D415, which also allows "?" and "!")
    "F403",  # `from .classes import *` used; unable to detect undefined names (Note: used to match networkx)
    "N802",  # Function name ... should be lowercase
    "N803",  # Argument name ... should be lowercase (Maybe okay--except in tests)
    "N806",  # Variable ... in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N818",  # Exception name ... should be named with an Error suffix (Note: good advice)
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic number used in comparison, consider replacing magic with a constant variable
    "PLW2901",  # Outer for loop variable ... overwritten by inner assignment target (Note: good advice, but too strict)
    "RET502",  # Do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # Unnecessary variable assignment before `return` statement
    "S110",  # `try`-`except`-`pass` detected, consider logging the exception (Note: good advice, but we don't log)
    "S112",  # `try`-`except`-`continue` detected, consider logging the exception (Note: good advice, but we don't log)
    "SIM102",  # Use a single `if` statement instead of nested `if` statements (Note: often necessary)
    "SIM105",  # Use contextlib.suppress(...) instead of try-except-pass (Note: try-except-pass is much faster)
    "SIM108",  # Use ternary operator ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    "TRY003",  # Avoid specifying long messages outside the exception class (Note: why?)

    # Ignored categories
    "C90",  # mccabe (Too strict, but maybe we should make things less complex)
    "I",  # isort (Should we replace `isort` with this?)
    "ANN",  # flake8-annotations (We don't use annotations yet)
    "BLE",  # flake8-blind-except (Maybe consider)
    "FBT",  # flake8-boolean-trap (Why?)
    "DJ",  # flake8-django (We don't use django)
    "EM",  # flake8-errmsg (Perhaps nicer, but too much work)
    "ICN",  # flake8-import-conventions (Doesn't allow "_" prefix such as `_np`)
    "PYI",  # flake8-pyi (We don't have stub files yet)
    "SLF",  # flake8-self (We can use our own private variables--sheesh!)
    "TID",  # flake8-tidy-imports (Rely on isort and our own judgement)
    "TCH",  # flake8-type-checking (Note: figure out type checking later)
    "ARG",  # flake8-unused-arguments (Sometimes helpful, but too strict)
    "TD",  # flake8-todos (Maybe okay to add some of these)
    "FIX",  # flake8-fixme (like flake8-todos)
    "ERA",  # eradicate (We like code in comments!)
    "PD",  # pandas-vet (Intended for scripts that use pandas, not libraries)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports (w/o defining `__all__`)
"innerscope/tests/*py" = [
    "S101", "S301", "T201", "D103", "D100",  # Allow assert, print, pickle, and no docstring
    "A001", "A002", "B018", "C408", "C416", "E702", "E703", "F821", "F841",  # Let us test messy code
]
"innerscope/tests/test_repr.py" = ["E501"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
